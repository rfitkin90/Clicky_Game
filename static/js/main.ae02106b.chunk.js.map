{"version":3,"sources":["components/navbar.js","components/jumbotron.js","components/kitten-card.js","components/kitten-flex.js","App.js","index.js"],"names":["Navbar","react_default","a","createElement","className","id","this","props","guessMessage","score","highScore","Component","Jumbotron","KittenCard","src","image","alt","width","height","onClick","handleGuess","KittenFlex","shuffle","array","counter","length","index","Math","floor","random","temp","_this2","kittens","map","elem","kitten_card","key","guessed","App","state","event","preventDefault","Number","target","Object","assign","_this","i","findIndex","console","log","resetGame","incrementScore","newHighScore","setState","forEach","navbar","jumbotron","kitten_flex","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ae02106b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n   render() {\n      return (\n         <nav className=\"navbar navbar-expand-sm bg-light sticky-top\" id=\"main-navbar\">\n            <ul className=\"navbar-nav d-flex justify-content-between container\">\n               {/* <li className=\"nav-item\">\n                  <span><strong>Clicky Game</strong></span>\n               </li> */}\n               <li className=\"nav-item\">\n                  <span>{this.props.guessMessage}</span>\n               </li>\n               <li className=\"nav-item\">\n                  <span><strong>Score: </strong>{this.props.score} &nbsp;<strong>/</strong>&nbsp; </span>\n                  <span><strong>High Score: </strong>{this.props.highScore}</span>\n               </li>\n            </ul>\n         </nav>\n      );\n   }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n\nclass Jumbotron extends Component {\n   render() {\n      return (\n         <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n               <h1>Kitten Memory Game</h1>\n               <p>Click on a kitten to gain a point, but don't click on any more than once!</p>\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Jumbotron;","import React, { Component } from 'react';\n\nclass KittenCard extends Component {\n\n   render() {\n      return (\n         <div>\n            <img\n               src={this.props.image}\n               alt=\"kitten\"\n               className=\"kitten-card\"\n               id={this.props.id}\n               width=\"200\" height=\"200\"\n               onClick={this.props.handleGuess}\n            />\n         </div>\n      );\n   }\n}\n\nexport default KittenCard;","import React, { Component } from 'react';\n// import components\nimport KittenCard from './kitten-card';\n\n\nclass KittenFlex extends Component {\n\n   shuffle = array => {\n      let counter = array.length;\n      // While there are elements in the array\n      while (counter > 0) {\n         // Pick a random index\n         let index = Math.floor(Math.random() * counter);\n         // Decrease counter by 1\n         counter--;\n         // And swap the last element with it\n         let temp = array[counter];\n         array[counter] = array[index];\n         array[index] = temp;\n      }\n      return array;\n   }\n\n\n   render() {\n      return (\n         <div className=\"container kitten-flexbox d-flex flex-wrap\">\n            {this.shuffle(this.props.kittens).map(elem => (\n               <KittenCard\n                  key={elem.id}\n                  id={elem.id}\n                  image={elem.image}\n                  guessed={elem.guessed}\n                  handleGuess={this.props.handleGuess}\n               />\n            ))}\n         </div>\n      );\n   }\n}\n\nexport default KittenFlex;","import React, { Component } from 'react';\nimport './style.css';\n// import bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import components\nimport Navbar from './components/navbar';\nimport Jumbotron from './components/jumbotron';\nimport KittenFlex from './components/kitten-flex';\nimport kittens from \"./kittens.json\";\n\n\nclass App extends Component {\n   state = {\n      score: 0,\n      highScore: 0,\n      kittens: kittens,\n      guessMessage: 'Click a kitten to play!'\n   };\n\n\n   handleGuess = event => {\n      event.preventDefault();\n      // get id of kitten clicked\n      const id = Number(event.target.id);\n      // create new kitten object to change properties individually\n      const kittens = Object.assign(this.state.kittens);\n      // find kitten index of the event.target id to also find its guessed state\n      const i = kittens.findIndex(elem => elem.id === id);\n\n      console.log('\\n|========================= Clicked Kitten Info =========================|\\n\\n')\n      console.log('id:', id);\n      console.log('already guessed?:', kittens[i].guessed);\n\n      // if correct guess\n      if (!kittens[i].guessed) {\n         if (this.state.highScore === this.state.score) {\n            // new high score reached\n            this.incrementScore(kittens, i, this.state.highScore + 1, 'Correct guess!');\n         } else {\n            // no new high score reached\n            this.incrementScore(kittens, i, this.state.highScore, 'Correct guess!');\n         }\n         // also check win condition(if they guess all correctly)\n         if (this.state.score === kittens.length - 1) {\n            this.resetGame(kittens, 'You win! Play again!');\n         }\n         // if incorrect guess\n      } else {\n         this.resetGame(kittens, 'Incorrect guess! Play again!');\n      }\n   }\n\n\n   incrementScore = (kittens, i, newHighScore, guessMessage) => {\n      // set clicked kitten's guessed state to true\n      kittens[i].guessed = true;\n      // update score/kittens states\n      this.setState({\n         score: this.state.score + 1,\n         highScore: newHighScore,\n         kittens: kittens,\n         guessMessage: guessMessage\n      });\n   }\n\n\n   resetGame = (kittens, guessMessage) => {\n      // change all kittens' guessed states back to false\n      kittens.forEach(elem => {\n         elem.guessed = false;\n      });\n      // reset score and update all kittens' states\n      this.setState({\n         score: 0,\n         kittens: kittens,\n         guessMessage: guessMessage\n      });\n   }\n\n\n   render() {\n      return (\n         <div id=\"main-container\">\n            {console.log('\\n|============================== New State ==============================|\\n\\n')}\n            {console.log('score:', this.state.score)}\n            {console.log('highScore:', this.state.highScore)}\n            {console.log('kittens:\\n', this.state.kittens)}\n            <Navbar\n               score={this.state.score}\n               highScore={this.state.highScore}\n               guessMessage={this.state.guessMessage}\n            />\n            <Jumbotron />\n            <KittenFlex\n               score={this.state.score}\n               highScore={this.state.highScore}\n               kittens={this.state.kittens}\n               handleGuess={this.handleGuess}\n            />\n         </div>\n      );\n   }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}