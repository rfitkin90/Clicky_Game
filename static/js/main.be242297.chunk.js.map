{"version":3,"sources":["components/navbar.js","components/jumbotron.js","components/kitten-card.js","components/kitten-flex.js","App.js","index.js"],"names":["Navbar","react_default","a","createElement","className","id","this","props","guessMessage","score","highScore","Component","Jumbotron","KittenCard","src","image","alt","checked","guessed","width","height","onClick","handleGuess","KittenFlex","shuffle","array","counter","length","index","Math","floor","random","temp","appendCards","_this","kittens","map","elem","kitten_card","key","App","state","event","preventDefault","console","log","target","Number","Object","assign","resetGame","incrementScore","newHighScore","i","findIndex","setState","forEach","window","location","origin","navbar","jumbotron","kitten_flex","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.be242297.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n   render() {\n      return (\n         <nav className=\"navbar navbar-expand-sm bg-light sticky-top\" id=\"main-navbar\">\n            <ul className=\"navbar-nav d-flex justify-content-between container\">\n               {/* <li className=\"nav-item\">\n                  <span><strong>Clicky Game</strong></span>\n               </li> */}\n               <li className=\"nav-item\">\n                  <span>{this.props.guessMessage}</span>\n               </li>\n               <li className=\"nav-item\">\n                  <span><strong>Score: </strong>{this.props.score} &nbsp;<strong>/</strong>&nbsp; </span>\n                  <span><strong>High Score: </strong>{this.props.highScore}</span>\n               </li>\n            </ul>\n         </nav>\n      );\n   }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n\nclass Jumbotron extends Component {\n   render() {\n      return (\n         <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n               <h1>Kitten Memory Game</h1>\n               <p>Click on a kitten to gain a point, but don't click on any more than once!</p>\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Jumbotron;","import React, { Component } from 'react';\n\nclass KittenCard extends Component {\n\n   render() {\n      return (\n         <div>\n            <img\n               src={this.props.image}\n               alt=\"kitten\"\n               className=\"kitten-card\"\n               id={this.props.id}\n               // why can't i pass this as a string using a non-boolean attribute, then turn it into\n               // a boolean afterwards with the Boolean() method?\n               checked={this.props.guessed}\n               width=\"200\" height=\"200\"\n               onClick={this.props.handleGuess}\n            // no way to pass parameters here?\n            // onClick={this.props.handleGuess(this.props.id, this.props.guessed)}\n            />\n         </div>\n      );\n   }\n}\n\nexport default KittenCard;","import React, { Component } from 'react';\n// import components\nimport KittenCard from './kitten-card';\n\n\nclass KittenFlex extends Component {\n\n   shuffle = array => {\n      let counter = array.length;\n      // While there are elements in the array\n      while (counter > 0) {\n         // Pick a random index\n         let index = Math.floor(Math.random() * counter);\n         // Decrease counter by 1\n         counter--;\n         // And swap the last element with it\n         let temp = array[counter];\n         array[counter] = array[index];\n         array[index] = temp;\n      }\n      return array;\n   }\n\n   appendCards = () => {\n      return this.shuffle(this.props.kittens).map(elem => (\n         <KittenCard\n            key={elem.id}\n            id={elem.id}\n            image={elem.image}\n            guessed={elem.guessed}\n            handleGuess={this.props.handleGuess}\n         />\n      ))\n   }\n\n   render() {\n      return (\n         <div className=\"container kitten-flexbox d-flex flex-wrap\">\n            {this.appendCards()}\n         </div>\n      );\n   }\n}\n\nexport default KittenFlex;","import React, { Component } from 'react';\nimport './style.css';\n// import bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import components\nimport Navbar from './components/navbar';\nimport Jumbotron from './components/jumbotron';\nimport KittenFlex from './components/kitten-flex';\nimport kittens from \"./kittens.json\";\n\n\nclass App extends Component {\n   state = {\n      score: 0,\n      highScore: 0,\n      kittens: kittens,\n      guessMessage: 'Click a kitten to play!'\n   };\n\n\n   handleGuess = event => {\n      event.preventDefault();\n      console.log('id:', event.target.id);\n      console.log('guessed:', event.target.checked);\n      // get index of kitten clicked\n      const id = Number(event.target.id);\n      // create new kitten object to change properties individually\n      const kittens = Object.assign(this.state.kittens);\n      // if correct guess\n      if (!event.target.checked) {\n         if (this.state.highScore === this.state.score) {\n            // new high score reached\n            this.incrementScore(kittens, id, this.state.highScore + 1, 'Correct guess!');\n         } else {\n            // no new high score reached\n            this.incrementScore(kittens, id, this.state.highScore, 'Correct guess!');\n         }\n         // also check win condition(if they guess all correctly)\n         if (this.state.score === kittens.length - 1) {\n            this.resetGame(kittens, 'You win! Play again!');\n         }\n         // if incorrect guess\n      } else {\n         this.resetGame(kittens, 'Incorrect guess! Play again!');\n      }\n   }\n\n\n   incrementScore = (kittens, id, newHighScore, guessMessage) => {\n      // find index of clicked kitten's id(since shuffling the array gave it a new index)\n      const i = kittens.findIndex(elem => elem.id === id);\n      // set clicked kitten's guessed state to true\n      kittens[i].guessed = true;\n      // update score/kittens states\n      this.setState({\n         score: this.state.score + 1,\n         highScore: newHighScore,\n         kittens: kittens,\n         guessMessage: guessMessage\n      });\n   }\n\n\n   resetGame = (kittens, guessMessage) => {\n      // change all kittens' guessed states back to false\n      kittens.forEach(elem => {\n         elem.guessed = false;\n      });\n      // reset score and update all kittens' states\n      this.setState({\n         score: 0,\n         kittens: kittens,\n         guessMessage: guessMessage\n      });\n   }\n\n\n   render() {\n      return (\n         <div id=\"main-container\">\n            {console.log(window.location.origin)}\n            {console.log('\\n|============================== State Change ==============================|\\n\\n')}\n            {console.log('score:', this.state.score)}\n            {console.log('highScore:', this.state.highScore)}\n            {console.log('kittens:\\n', this.state.kittens)}\n            <Navbar\n               score={this.state.score}\n               highScore={this.state.highScore}\n               guessMessage={this.state.guessMessage}\n            />\n            <Jumbotron />\n            <KittenFlex\n               score={this.state.score}\n               highScore={this.state.highScore}\n               kittens={this.state.kittens}\n               handleGuess={this.handleGuess}\n            />\n         </div>\n      );\n   }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}